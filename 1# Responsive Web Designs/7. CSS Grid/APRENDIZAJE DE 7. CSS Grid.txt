7# CSS Grid

RESUMEN DE LO APRENDIDO EN CADA LECCIÓN!!!

	1.7- CSS Grid
		1.7.1.  Crea tu primera CSS Grid
		_ Convierte cualquier elemento HTML en una grid al establecer la propiedad “display” a “grid” . Esto te da la habilidad de usar todas las demás propiedades asociadas con CSS Grid.
Nota: en CSS Grid, el elemento padre se refiere como el (contenedor) y sus hijos se llaman (elementos).
		1.7.2.  Agrega columnas con grid-template-columns
		_ Crear un simple elemento cuadrícula (grid) no te llevará muy lejos. Necesitas también definir su estructura. Para agregar columnas a la cuadrícula, usa la propiedad “grid-template-columns” en el contenedor de la cuadrícula como se demuestra a continuación:
.container {
  display: grid;
  grid-template-columns: 50px 50px;
}
		Esto le dará a tu cuadrícula dos columnas que tienen 50px de ancho cada una. El número de parámetros que se le da a la propiedad “grid-template-columns” indica el número de columnas en la cuadrícula y el valor de cada parámetro indica el ancho de cada columna.
		1.7.3.  Agrega filas con grid-template-rows
		_ La cuadrícula (grid) que creaste en el último desafío establecerá el número de filas automáticamente. Para ajustar las filas manualmente, usa la propiedad “grid-template-rows” de la misma manera como usaste “grid-template-columns” en el desafío anterior. 
		
		1.7.4.  Usa unidades CSS Grid para cambiar el tamaño de las columnas y filas
		_ Puedes usar unidades absolutas y relativas como “px” y “em” en CSS Grid para definir el tamaño de filas y columnas. Puedes usar estas también:
“fr”: fija la columna o fila a una fracción del espacio disponible,
“auto”: fija la columna o fila al ancho o alto de su contenido automáticamente,
“%”: ajusta la columna o fila al porcentaje de ancho de su contenedor.
A continuación el código que genera el resultado de la vista previa:
grid-template-columns: auto 50px 10% 2fr 1fr;
Esta línea de código genera cinco columnas. La primera columna es tan ancha como su contenido, la segunda tiene 50px de ancho, la tercera es el 10% de su contenedor y para las últimas dos columnas; el espacio restante es dividido en tres secciones: dos son asignadas a la cuarta columna y una a la quinta columna.
		1.7.5.  Crea un espacio entre columnas usando grid-column-gap
		_ Hasta ahora en las grids que has creado, las columnas han estado todas juntas. Algunas veces querrás un espacio entre las columnas. Para agregar un espacio entre las columnas, usa la “propiedadgrid-column-gap” de la siguiente manera:
grid-column-gap: 10px;
Esto crea espacios vacíos de 10px entre todas las columnas.
		1.7.6.  Crea un espacio entre filas usando grid-row-gap
		_ Puedes agregar un espacio entre las filas usando “grid-row-gap” de la misma manera en la que agregaste un espacio entre las columnas en el desafío anterior. 

		1.7.7.  Agrega espacios más rápido con grid-gap
		_ “grid-gap” es una propiedad abreviada para “grid-row-gap” y “grid-column-gap” de los dos desafíos anteriores que es más conveniente usar. Si ”grid-gap” tiene un valor, creará un espacio entre todas las filas y columnas. Sin embargo, si hay dos valores, usará el primero de estos para poner los espacios entre las filas y el segundo para los espacios entre las columnas. 
		
		1.7.8.  Usa grid-column para controlar espaciado
		_ Hasta este punto, todas las propiedades que hemos discutido son para los contenedores de cuadrícula (grid). La propiedad “grid-column” es la primera que usaremos para los propios elementos de la cuadrícula.
Las líneas horizontales y verticales hipotéticas que crean la cuadrícula son referidas como líneas. Estas líneas son enumeradas empezando con el 1 desde la esquina superior izquierda de la cuadrícula y se desplaza hacia la derecha para las columnas y hacia abajo para las filas, contando hacia arriba.
Para controlar la cantidad de columnas que un elemento tendrá, puedes usar la propiedad “grid-column” en conjunto con el número de las líneas en las que quieres que empiece y termine.
Aquí un ejemplo:
grid-column: 1 / 3;
Esto hará que el elemento empiece en la primera línea vertical de la grid a la izquierda y se extienda a la 3ra línea de la grid, ocupando dos columnas.
		1.7.9.  Usa grid-row para controlar espaciado
		_ Por supuesto, puedes hacer que los elementos ocupen múltiples filas así como se puede hacer con las columnas. Puedes definir las líneas horizontales donde quieres que un elemento empiece y termine usando la propiedad “grid-row” sobre un elemento de cuadrícula (grid). 
		
		1.7.10. Alinea un elemento horizontalmente usando justify-self
		_ En CSS Grid, el contenido de cada elemento está ubicado en una caja, la cual se refiere como celda. Puedes alinear la posición del contenido dentro de la celda horizontalmente usando la propiedad “justify-self” en un elemento grid. Por defecto, esta propiedad tiene valor de “stretch” , lo que hace que el contenido cubra todo el ancho de la celda. Esta propiedad de CSS Grid acepta otros valores también:
“start”: alinea el contenido hacia la izquierda de la celda,
“center”: alinea el contenido en el centro de la celda,
“end”: alinea el contenido hacia la derecha de la celda.
		1.7.11. Alinea un elemento verticalmente usando align-self
		_ Así como puedes alinear un elemento horizontalmente, hay una manera de alinearlo verticalmente también. Para hacer esto, usa la propiedad “align-self” sobre un elemento. Esta propiedad acepta los mismos valores que “justify-self” del desafío anterior. 

		1.7.12. Alinea todos los elementos horizontales usando justify-items
		_

		1.7.13. Alinea todos los elementos verticalmente usando align-items
		_ 

		1.7.14. Divide la grid en una plarilla de área
		_ 

		1.7.15. Ubica elementos en áreas de cuadrículas (grid) usando la propiedad grid-area
		_

		1.7.16. Usa grid-area sin crear platillas de área
		_ 

		1.7.17. Reduce repeticiones usando la función repeat
		_ 

		1.7.18. Limita el tamaño del elemento usando la función minmax
		_ 

		1.7.19. Crea diseños flexibles usando auto-fill
		_ 

		1.7.20. Crea diseños flexibles usando auto-fit
		_ 

		1.7.21. Usa consultas de medios (media queries) para crear diseños responsivos
		_ 

		1.7.22. Crea cuadrículas (grids) dentro de cuadrículas
		_ 
