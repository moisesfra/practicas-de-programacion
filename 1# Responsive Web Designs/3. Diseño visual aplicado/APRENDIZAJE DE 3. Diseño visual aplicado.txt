3# Diseño visual aplicado

RESUMEN DE LO APRENDIDO EN CADA LECCIÓN!!!

	1.3- Diseño visual aplicado
		1.3.1.  Crea un balance visual usando la propiedad text-align
		_ Se aprende sobre la propiedad “text-align” para poner texto centrado,justificado, a la izquierda o la derecha. 

		1.3.2.  Ajusta el ancho de un elemento utilizando la propiedad width
		_ El ancho de un elemento con la propiedad width en CSS. Los valores se pueden dar en unidades de longitud relativa (como “em”, unidades de longitud absoluta (como “px”, o como un porcentaje de su elemento padre contenedor. El siguiente ejemplo cambia el ancho de una imagen a 220px:
img {
  width: 220px;
}

		1.3.3.  Ajusta la altura de un elemento utilizando la propiedad height
		_ Se especifica la altura de un elemento con la propiedad height en CSS como lo haces con la propiedad width (ancho). En el siguiente ejemplo, se cambia la altura de una imagen a 20px:
img {
  height: 20px;
}

		1.3.4.  Utiliza la etiqueta strong para poner el texto en negrita
		_ Para poner el texto en negrita, puedes usar la etiqueta strong. Esto se usa a menudo para llamar la atención sobre el texto y simbolizar que es importante. Con la etiqueta strong, el navegador aplica el CSS de font-weight: bold; al elemento. Ejemplo:
<strong>Stanford University</strong>

		1.3.5.  Utiliza la etiqueta u para subrayar texto 
		_ Para subrayar el texto, puedes utilizar la etiqueta “u”. Esto se usa a menudo para indicar que una sección del texto es importante, o algo que hay que recordar. Con la etiqueta “u”, el navegador aplica el CSS de text-decoration: underline; al elemento. Ejemplo:
Hola <u>Mundo loco</u>

		1.3.6.  Usa la etiqueta em para poner texto en cursiva 
		_ Para enfatizar el texto, puedes usar la etiqueta “em”. Esto muestra el texto en cursiva, ya que el navegador aplica el CSS de font-style: italic; al elemento. Ejemplo:
Hola <em>Mundo loco</em>

		1.3.7.  Usa la etiqueta s para tachar texto 
		_ Para tachar el texto, que es cuando una línea horizontal atraviesa los caracteres, puede usar la etiqueta “s”. Muestra que una sección de texto ya no es válida. Con la etiqueta “s”, el navegador aplica el CSS de text-decoration: line-through; al elemento. Ejemplo:
<h4><s>Google</s></h4>

		1.3.8.  Crea una línea horizontal usando el elemento hr 
		_ Se puede usar la etiqueta “hr” para agregar una línea horizontal a través del ancho de su elemento contenedor. Esto se puede usar para definir un cambio de tema o para separa grupos de contenido visualmente. Ejemplo:
<h4><s>Google</s> Alphabet</h4>
<hr>
<h5>Holis xD</h5>

		1.3.9.  Ajusta la propiedad background-color del texto 
		_ En lugar de ajustar el fondo general o el color del texto para que el primer plano sea fácilmente legible, puedes agregar un background-color al elemento que contiene el texto que deseas destacar. Este reto utiliza rgba() en lugar de códigos hex o rgb() normal.
rgba significa:
r = red
g = green
b = blue
a = alfa/nivel de opacidad
Ejemplo:
background-color: rgba(45, 45, 45, 0.1) 
Los valores RGB pueden variar de 0 a 255. El valor alfa puede variar de 1, que es completamente opaco o un color sólido, a 0, que es completamente transparente o claro. rgba() es ideal para usar en este caso, ya que te permite ajustar la opacidad. Esto significa que no tienes que bloquear completamente el fondo. 


		1.3.10. Ajusta el tamaño de un título contra una etiqueta de párrafo
		_ El tamaño de fuente de las etiquetas de encabezado (h1 a h6) generalmente debería ser mayor que el tamaño de fuente de las etiquetas de párrafos. Esto hace que sea más sencillo para que el usuario entienda visualmente el diseño y el nivel de importancia de cada elemento en la página. Utiliza la propiedad font-size para ajustar el tamaño del texto en un elemento. Ejemplo:
font-size: 27px;

		1.3.11. Agrega box-shadow a un elemento tipo tarjeta 
		_ La propiedad “box-shadow” aplica una o más sombras a un elemento.
La propiedad “box-shadow” toma valores para
    • offset-x (qué tan lejos extender la sombra horizontalmente desde el elemento),
    • offset-y (qué tan lejos extender la sombra verticalmente desde el elemento),
    • blur-radius,
    • spread-radius 
    • color, en ese orden.
Los valores “blur-radius” y “spread-radius” son opcionales.
Se pueden crear múltiples “box-shadows” usando comas para separar las propiedades de cada elemento “box-shadow”.
A continuación un ejemplo de CSS para crear múltiples sombras con un poco de desenfoque, con colores negros casi transparentes: EJEMPLO:
box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);

		1.3.12. Disminuir la opacidad de un elemento 
		_ La propiedad “opacity” en CSS se usa para ajustar la opacidad o, por el contrario, la transparencia de un elemento.
Un valor de 1 es opaco, que no es transparente en absoluto.
Un valor de 0.5 es la mitad transparente.
Un valor de 0 es completamente transparente.
El valor dado se aplicará a todo el elemento, ya sea una imagen con cierta transparencia, o los colores de primer plano y fondo para un bloque de texto. Ejemplo:
opacity: 0.7;
		
		1.3.13. Usa la propiedad text-transform para hacer el texto mayúsculas
		_ La propiedad “text-transform” en CSS se utiliza para cambiar la apariencia del texto. Es una forma conveniente de asegurarse de que el texto en una página web aparezca de manera consistente, sin tener que cambiar el contenido del texto de los elementos HTML reales.
		
		1.3.14. Establece el tamaño de fuente para varios elementos de títulos
		_ La propiedad “font-size” se usa para especificar que tan grande es el texto en un elemento dado. Esta regla se puede utilizar para varios elementos para crear coherencia visual del texto en una página.

		1.3.15. Establece el font-weight para varios elementos de títulos 
		_ Se establece el “font-size” de cada etiqueta de título en el último desafío, aquí podrás ajustar el “font-weight”.
La propiedad “font-weight” establece que tan gruesos o delgados son los caracteres en una sección de texto.
		1.3.16. Establece el tamaño de fuente del texto del párrafo
		_  La propiedad “font-size” en CSS no se limita a los títulos, se puede aplicar a cualquier elemento que contenga texto. 

		1.3.17. Establece la line-height de los párrafos 
		_ CSS ofrece la propiedad “line-height” para cambiar la altura de cada línea en un bloque de texto. Como sugiere el nombre, cambia la cantidad de espacio vertical que recibe cada línea de texto. 

		1.3.18. Ajusta el hover de una etiqueta anchor 
		_ El uso de las pseudo-clases es una palabra clave que se puede agregar a los selectores para seleccionar un estado específico de un elemento.
Por ejemplo, el estilo de una etiqueta "anchor" puede ser cambiado por el estado de su hover utilizando el selector de pseudo-clase :hover. Aquí está el CSS para cambiar el color “color” de la etiqueta de "anchor" a rojo durante el estado hover:
a:hover {
  color: red;
}

		1.3.19. Cambia la posición relativa de un elemento 
		_ Cuando la posición de un elemento se establece a “relative”, te permite especificar como CSS lo moverá relativo a su posición actual dentro del flujo normal de la página. Se empareja con las propiedades de desplazamiento CSS de left o right, y top o bottom. Estas dicen cuántos pixeles, porcentajes, o ems se debe mover el elemento lejos de donde esté normalmente posicionado. El siguiente ejemplo mueve el párrafo 10 pixeles lejos de la parte inferior:
p {
  position: relative;
  bottom: 10px;
}
Cambiando la posición de un elemento a relative no lo quita del flujo normal; otros elementos a su alrededor aún se comportarán como si dicho elemento estuviera en su posición predeterminada.
		1.3.20. Mueve un elemento posicionado relativamente con desplazamientos de CSS 
		_ Los desplazamientos CSS de “top” o “bottom” y “left” o “right” indican al navegador hasta que punto debe compensar un elemento en relación con el lugar donde se ubicara en el flujo normal del documento. Está compensando un elemento lejos de un punto dado, lo que aleja el elemento del lado al que se hace referencia (efectivamente, en la dirección opuesta). Como viste en el último desafío, usando el desplazamiento “top” movió el “h2” hacia abajo. Del mismo modo, usando un desplazamiento “left” mueve un elemento hacia la derecha. 

		1.3.21. Bloquea un elemento con relación a su padre con el posicionamiento absoluto 
		_ La siguiente opción para la propiedad CSS “position” es “absolute”, que bloquea el elemento en su lugar en relación con su contenedor principal. A diferencia de la posición “relative”, esto elimina el elemento del flujo normal del documento, por lo que los elementos circundantes lo ignoran. Las propiedades de desplazamiento de CSS (superior o inferior e izquierda o derecha) se utilizan para ajustar la posición.
		Un matiz del posicionamiento absoluto es que estará bloqueado en relación con su antepasado posicionado más cercano. Si olvidas agregar una regla de posición al elemento principal, (esto generalmente se hace usando “  position: relative;  ”), el navegador seguirá buscando en la jerarquía de elementos y, en última instancia tomará por defecto la etiqueta “body”.
		1.3.22. Bloquea un elemento a la ventana del navegador con el posicionamiento fijo 
		_ El diseño que ofrece CSS es la posición “fixed”, que es un tipo de posicionamiento absoluto que bloquea un elemento relativo a la ventana del navegador. Similar al posicionamiento absoluto, se usa con las propiedades de desplazamiento CSS y también elimina el elemento del flujo normal del documento. Otros elementos ya no "se dan cuenta" de donde se coloca, lo que puede requerir algunos ajustes de diseño en otros lugares.
Una diferencia clave entre las posiciones “fixed” y “absolute” es que un elemento con una posición fija (fixed) no se moverá cuando el usuario se desplace.
		1.3.23. Empuja elementos hacia la izquierda o hacia la derecha con la propiedad float 
		_ La siguiente herramienta de posicionamiento en realidad no usa “position”, sino que establece la propiedad “float” de un elemento. Los elementos flotantes se eliminan del flujo normal de un documento y se empujan a “left” o “right” de su elemento padre contenedor. Se usa comúnmente con la propiedad “width” para especificar cuanto espacio horizontal requiere el elemento flotante. 

		1.3.24. Cambia la posición de los elementos superpuestos con la propiedad z-index
		_ Cuando los elementos son posicionados para superponerse (i.e. usando “  position: absolute | relative | fixed | sticky  “), el elemento que viene después dentro del marcado HTML aparecerá, por defecto, encima de los otros elementos. Sin embargo, la propiedad “z-index” puede especificar el orden de cómo los elementos están apilados unos sobre otros. Debe ser un entero (i.e. un número entero y no un decimal), y los elementos que mayor valor tengan en “z-index” serán movidos más arriba en la pila de elementos que aquellos con valores menores. 

		1.3.25. Centra un elemento horizontalmente usando la propiedad margin
		_  Otra técnica de posicionamiento consiste en centrar un elemento de bloque horizontalmente. Una manera de hacer esto es que “margin” tenga valor auto.
Este método también funciona para imágenes. Las imágenes son elementos en línea de forma predeterminada, pero se pueden cambiar a elementos de bloque cuando se establece la propiedad “display” en “block”.
		1.3.26. Aprende sobre colores complementarios  
		_  El círculo cromático es una herramienta útil para observar cómo los colores están relacionados entre sí - es un círculo donde los tonos similares están juntos y los tonos diferentes alejados. Cuando dos colores opuestos están juntos en el círculo, se los llama colores complementarios. Se caracterizan porque si se combinan, se cancelan así mismos y crean un color gris. Sin embargo, al ubicarse juntos, estos colores parecen más brillantes y producen un contraste visual fuerte.
A continuación hay algunos ejemplos de colores con sus códigos hexadecimales:
rojo (#FF0000) y cian (#00FFFF)
verde(#00FF00) y magenta (#FF00FF)
azul (#0000FF) y amarillo (#FFF00)
Esto es diferente del anticuado modelo de color RYB que muchos de nosotros aprendimos en la escuela, que tiene diferentes colores primarios y complementarios. La teoría moderna del color utiliza el modelo aditivo RGB (como en una pantalla de computadora) y el modelo restante CMY(K) (como en la impresión). Lee aquí para obtener más información sobre este complejo tema.
Hay muchas herramientas de selección de color disponibles en línea que tienen la opción de encontrar el complemento de un color.
Nota: El uso del color puede ser una forma poderosa de agregar interés visual a una página. Sin embargo, el color por sí solo no debe utilizarse como la única manera de transmitir información importante porque los usuarios con deficiencias visuales pueden no entender ese contenido. Esta cuestión se tratará con más detalle en los desafíos de accesibilidad aplicada.
		1.3.27. Aprende sobre colores terciarios
		_ Los monitores y las pantallas crean diferentes colores al combinar cantidades de luz roja, verde y azul. Esto se conoce como modelo aditivo de color RGB en la teoría de moderna de color. Rojo (R), verde (G) y azul (B) «por sus siglas en inglés» son colores primarios. Al combinar dos colores primarios se los colores secundarios cian (G + B), magenta (R + B) y amarillo (R + G). Ya viste estos colores en los desafíos de colores complementarios. Estos colores secundarios son el complemento del color primario no utilizado en su creación y están frente a ese color primario en el círculo cromático. Por ejemplo, el magenta está compuesto de rojo y azul y es el complemento del verde.
Los colores terciarios se forman al combinar dos colores primarios con uno de sus vecinos de color secundario. Por ejemplo, entre el modelo de color RGB, rojo (primario) y amarillo (secundario) forman naranja (terciario). Esto añade seis colores a un círculo cromático simple para un total de doce.
Aquí hay tres colores creados usando el esquema de dividir-complemento:
Color
Código hexadecimal
anaranjado
#FF7F00
cian
#00FFFF
frambuesa
#FF007F


		1.3.28. Adjustar los colores de varios elementos para colores complementarios 
		_ En el desafío de colores complementarios vimos que al colocar dos colores opuestos del círculo cromático, parecen más vivos. Sin embargo, el contraste visual fuerte puede ser molesto si se utiliza en un sitio web y algunos veces pueden hacer que el texto sea difícil de leer si está dentro de un ( complementary-color background ). En la práctica, usualmente se usa uno de los colores como dominante y los complementarios se usan para atraer atención visual a cierto contenido dentro de la página. 

		1.3.29. Ajusta el matiz de un color 
		_ Los colores tienen varias características tales como el matiz, la saturación y la ligereza. CSS3 introdujo la propiedad “ hsl() “ como una forma alternativa de elegir un color indicando directamente estas características.
Se suele pensar que Hue es el "color". Si imaginas un espectro de colores con un rojo en la izquierda que se torna verde en el medio y azul en la derecha, el tono es donde cabe un color a lo largo de esta línea. En “ hsl() “, el tono usa un concepto de círculo cromático en lugar del espectro, donde el ángulo del color en el círculo se da como un valor entre 0 y 360.
Saturation es la cantidad de gris en un color. Un color totalmente saturado no tiene gris y un color mínimamente saturado es casi completamente gris. Esto se da como un porcentaje con 100% de saturación.
Lightness es la cantidad de blanco en un color. Un porcentaje se da desde 0% (negro) hasta 100% (blanco), donde 50% es el color normal.
Aquí hay algunos ejemplos de “ hsl() “ con colores de iluminación normales y completamente saturados:
Color
HSL
rojo
hsl(0, 100 %, 50 %)
amarillo
hsl(60, 100 %, 50 %)
verde
hsl(120, 100 %, 50 %)
cian
hsl(180, 100 %, 50 %)
azul
hsl(240, 100 %, 50 %)
magenta
hsl(300, 100 %, 50 %)


		1.3.30. Ajusta el tono de un color 
		_ La opción “ hsl() “ en CSS también hace que sencillo ajustar el tono de un color. Mezclar blanco con un tono puro crea un tinte de ese color y añadir negro hará una sombra. De forma alternativa, un tono se produce al añadir gris o tintes y sombras. Recuerda que la 's' y 'l' del “ hsl() “ representan saturación y ligereza, respectivamente. El porcentaje de saturación cambia la cantidad de gris y el porcentaje de luz determina el porcentaje de blanco o de negro que hay en el color. Esto es útil cuando se tiene un tono base que se quiere, pero necesita variaciones diferentes del mismo. 

		1.3.31. Crea un gradiente lineal de CSS gradual 
		_ La aplicación de un color en elementos HTML no se limita a un tono plano. CSS proporciona la capacidad de usar transiciones de color, también conocidas como degradados, en los elementos. Esto se accede a través de la función “ linear-gradient() “ de la propiedad “ background ”. Aquí está la sintaxis general:

background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);
El primer argumento especifica la dirección desde la que comienza la transición de color - se puede establecer como un grado, donde “ 90deg ” hace un gradiente horizontal (de izquierda a derecha) y “ 45deg ” hace un gradiente diagonal (de abajo a izquierda hacia arriba a la derecha). Los siguientes argumentos especifican el orden de los colores utilizados en el degradado.
Ejemplo:
background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));
		1.3.32. Utiliza un degradado lineal CSS para crear un elemento rayado 
		_ La función “ repeating-linear-gradient() ” es muy similar a “ linear-gradient() ” con la principal diferencia de que repite el patrón de degradado especificado. “ repeating-linear-gradient() ” acepta una variedad de valores, pero para simplificar, trabajarás con un valor de ángulo y valores de parada de color en este desafío.
El valor del ángulo es la dirección del gradiente. Las paradas de color son como valores de ancho que marcan donde tiene lugar una transición, y se dan con un porcentaje o un número de píxeles.
		1.3.33. Crea textura agregando un patrón sutil como imagen de fondo 
		_ Una forma de agregar textura e interés a un fondo y hacer que se destaque más es agregar un patrón sutil. La clave está en el balance, dado que no querrás que el fondo destaque demasiado y quite atención al primer plano. La propiedad “ background ” acepta la función “ url() “ para enlazar una imagen de la textura o patrón elegido. El enlace es cubierto entre comillas dentro del paréntesis. 

		1.3.34. Utiliza la propiedad de escala de transformación CSS para cambiar el tamaño de un elemento 
		_ Para cambiar la escala de un elemento, CSS tiene la propiedad “transform” , junto con su función “ scale() ”. En el ejemplo de código siguiente se duplica el tamaño de todos los elementos de párrafo de la página:
p {
  transform: scale(2);
}

		1.3.35. Utiliza la propiedad de escala de transformación CSS para escalar un elemento al desplazarse 
		_ La propiedad “transform” tiene una variedad de funciones que el permiten escalar, mover, rotar, sesgar, etc., sus elementos. Cuando se usa con pseudo-classes como :hover que especifican un cierto estado de un elemento, la propiedad transform puede agregar fácilmente interactividad a sus elementos.
Aquí hay un ejemplo para escalar los elementos de párrafo a 2.1 veces su tamaño original:
p:hover {
  transform: scale(2.1);
}
Nota: La aplicación de una transformación a un elemento div también afectará a cualquier elemento secundario contenido de el div.
		1.3.36. Utiliza la propiedad de transformación CSS skewX para inclinar un elemento a lo largo del eje X 
		_ La siguiente función de la propiedad “ transform ” es “ skewX() ”, que inclinar el elemento seleccionado a lo largo de su eje X (horizontal).
El siguiente código inclina el elemento de párrafo en -32 grados a lo largo del eje X.
p {
  transform: skewX(-32deg);
}

		1.3.37. Utiliza la propiedad de transformación CSS skewY para inclinar un elemento a lo largo del eje Y  
		_ Dado que la función “ skewX() “ inclina el elemento seleccionado a lo largo del eje X en un grado dado, no sorprende que la propiedad “ skewY() “ incline un elemento a lo largo del eje Y (vertical). 

		1.3.38. Crea un gráfico usando CSS 
		_ Al manipular diferentes selectores y propiedades, puedes hacer figuras interesantes. Una de las figuras más fáciles de intentar es la luna creciente. Para este desafío necesitas trabajar con la propiedad “box-shadow” que aplica la sombra de un elemento, junto con la propiedad “border-radius” que controla la redondez de las esquinas del elemento.
Crearás un objeto redondo y transparente con una sombra nítida que está ligeramente desplazada hacia un lado - la sombra en realidad va a ser la figura de luna que verás.
Para crear un objeto redondo, la propiedad “border-radius” se le debe asignar un valor de 50%.
Puede que recuerdes de un desafío anterior que la propiedad “box-shadow” toma valores para “offset-x”, “offset-y”, “blur-radius”, “spread-radius” y un valor para el color, en ese orden. Los valores “blur-radius” y “spread-radius” son opcionales.
		1.3.39. Crea una forma más compleja usando CSS y HTML  
		_ Una de las formas más populares en el mundo es la forma del corazón, y en este desafío crearás una usando CSS puro. Pero primero, debes comprender los pseudo-elements “ ::before “ y “ ::after ”. Estos pseudo-elements se utilizan para agregar algo antes o después de un elemento seleccionado. En el siguiente ejemplo, se utiliza un pseudo-elemento “ ::before “ para agregar un rectángulo a un elemento con la clase “ heart ”:
.heart::before {
  content: "";
  background-color: yellow;
  border-radius: 25%;
  position: absolute;
  height: 50px;
  width: 70px;
  top: -50px;
  left: 5px;
}
Para que los pseudo-elements “ ::before ” y “ ::after “ funcionen correctamente, deben tener una propiedad content definida. Esta propiedad generalmente se usa para agregar cosas como una foto o texto al elemento seleccionado. Cuando se utilizan los pseudo-elements “ ::before ” y “ ::after ” para crear formas, la propiedad “content” sigue siendo necesaria, pero se establece en una cadena vacía. En el ejemplo anterior, el elemento con la clase de “heart” tiene un pseudo-element “ ::before ” que produce un rectángulo amarillo con una altura y un ancho de “50px” y “70px”, respectivamente. Este rectángulo tiene esquinas redondeadas debido a su 25% “border-radius” y está posicionado absolutamente a “5px” desde la izquierda y “50px” por encima de la parte superior del elemento.
		1.3.40. Aprende como funcionan las propiedades de CSS @keyframes y animación 
		_ Para animar un elemento, necesitas conocer las propiedades de animación y la regla @keyframes. Las propiedades de animación controlan como debe comportarse la animación y la regla @keyframes controla lo que sucede durante esa animación. Hay ocho propiedades de animación en total. Este desafío lo mantendrá simple y cubrirá primero los dos más importantes:
animation-name establece el nombre de la animación, que luego es utilizada por @keyframes para decirle a CSS que reglas van con que animaciones.
Animation-duration establece el tiempo de la animación.
@keyframes es como especificar exactamente lo que sucede dentro de la animación durante la duración. Esto se hace dando propiedades CSS para "marcos" específicos durante la animación, con porcentajes que van del 0% al 100%. Si comparas esto con una película, las propiedades de CSS de 0% es como se muestra el elemento en la escena inicial. Las propiedades de CSS con 100% es como aparece el elemento al final, justo antes de que rueden los créditos. Luego, CSS aplica la magia para hacer la transición del elemento durante la duración dada para representar la escena. Aquí hay un ejemplo para ilustrar el uso de @keyframes y las propiedades de animación:
#anim {
  animation-name: colorful;
  animation-duration: 3s;
}

@keyframes colorful {
  0% {
    background-color: blue;
  }
  100% {
    background-color: yellow;
  }
}
		
		1.3.41. Usa animación CSS para cambiar el estado del desplazamiento de un botón 
		_ Puedes usar CSS @keyframes para cambiar el color de un botón en su estado de desplazamiento.
Aquí hay un ejemplo de como cambiar el ancho de una imagen al pasar sobre ella:
<style>
  img:hover {
    animation-name: width;
    animation-duration: 500ms;
  }

  @keyframes width {
    100% {
      width: 40px;
    }
  }
</style>

<img src="https://bit.ly/smallgooglelogo" alt="Google's Logo" />

		
		1.3.42. Modifica el modo de relleno de una animación (animation-fill-mode) 
		_ Observa como la animación se restablece después de que haya pasado 500ms, haciendo que el botón vuelva al color original. Lo que quieres es que el botón permanezca resaltado.
Esto se puede hacer estableciendo la propiedad animation-fill-mode en forwards. El animation-fill-mode especifica el estilo aplicado a un elemento cuando la animación ha finalizado. Puedes configurarlo así:
animation-fill-mode: forwards;
		1.3.43. Crear movimiento usando animación CSS 
		_ Cuando los elementos tienen una position, como fixed o relative, las propiedades de desplazamiento CSS right, left, top y bottom se pueden usar en las reglas de animación para crear movimiento.
Como se muestra en el siguiente ejemplo, puedes empujar el elemento hacia abajo y luego hacia arriba estableciendo la propiedad top fotograma clave (keyframe) a 50% en 50px, pero estableciéndolo en 0px para el primer fotograma clave (0%) y el último a (100%).
@keyframes rainbow {
  0% {
    background-color: blue;
    top: 0px;
  }
  50% {
    background-color: green;
    top: 50px;
  }
  100% {
    background-color: yellow;
    top: 0px;
  }
}
	
		1.3.44. Crear dirección visual desvaneciendo un elemento de izquierda a derecha 
		_ La opacidad (opacity) de un elemento animado  se desvanezce gradualmente a medida que llega al lado derecho de la pantalla.
En la animación mostrada, el elemento redondo con el fondo degradado se mueve hacia la derecha con la marca del 50% de la animación según la regla @keyframes. Ejemplo:
  @keyframes fade {
    50% {
      left: 60%;
      opacity: 0.1;
    }
  }
		1.3.45. Animar los elementos continuamente utilizando un contador de animaciones infinitas 
		_ En los desafíos anteriores, vimos cómo utilizar algunas de las propiedades de la animación y la regla “ @keyframes “. Otra propiedad de animación es la “animation-iteration-count” la cual te permite controlar cuántas veces te gustaría hacer un bucle a través de la animación. Por ejemplo:
animation-iteration-count: 3;
En este caso, la animación se detendrá después de ejecutarse 3 veces, pero es posible hacer que la animación se ejecute continuamente estableciendo ese valor en “infinite”.


		1.3.46. Haz latir un corazón con CSS usando un recuento de animación infinita 
		_ Aquí hay un ejemplo más de animación con la propiedad “animation-iteration-count” que usa el corazón que diseñaste en un desafío anterior.
La animación del latido de un segundo consta de dos piezas animadas. Los elementos “heart” (incluyendo las piezas “ :before ” y “ :after ”) se animan para cambiar el tamaño usando la propiedad “transform”, y el fondo “div” se anima para cambiar su color usando la propiedad “background”.
		1.3.47. Elementos animados con fluctuaciones 
		_ Hay muchas formas de alterar la cantidad de animaciones de elementos similares con animaciones. Hasta ahora, esto se ha logrado al aplicar una propiedad “animation-iteration-count” y estableciendo reglas “ @keyframes “.
A modo de ilustración, la animación de la derecha consta de dos estrellas, cada una de las cuales disminuye en tamaño y opacidad en la marca del 20% en la regla “ @keyframes ”, que crea la animación centelleante. Puede cambiar la regla “ @keyframes ” para uno de los elementos, así las estrellas titilan con diferentes ritmos.
		1.3.48. Animar múltiples elementos con ritmos diferentes
		_ 

		1.3.49. Cambia la duración de las animaciones con palabras clave  
		_ 

		1.3.50. Descubre como funcionan las curvas de Bezier
		_ 

		1.3.51. Usa una curva de Bezier para mover un gráfico 
		_ 

		1.3.52. Haz que el movimiento sea más natural usando una curva de Bezier 
		_ 
